/*
 * Ais-Stream WebsocketObjects
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataLinkManagementMessageData0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-21T15:33:26.956655+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class DataLinkManagementMessageData0 {
  public static final String SERIALIZED_NAME_VALID = "Valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  @javax.annotation.Nonnull
  private Boolean valid;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  @javax.annotation.Nonnull
  private Integer offset;

  public static final String SERIALIZED_NAME_INTEGER_OF_SLOTS = "integerOfSlots";
  @SerializedName(SERIALIZED_NAME_INTEGER_OF_SLOTS)
  @javax.annotation.Nonnull
  private Integer integerOfSlots;

  public static final String SERIALIZED_NAME_TIME_OUT = "TimeOut";
  @SerializedName(SERIALIZED_NAME_TIME_OUT)
  @javax.annotation.Nonnull
  private Integer timeOut;

  public static final String SERIALIZED_NAME_INCREMENT = "Increment";
  @SerializedName(SERIALIZED_NAME_INCREMENT)
  @javax.annotation.Nonnull
  private Integer increment;

  public DataLinkManagementMessageData0() {
  }

  public DataLinkManagementMessageData0 valid(@javax.annotation.Nonnull Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Get valid
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(@javax.annotation.Nonnull Boolean valid) {
    this.valid = valid;
  }


  public DataLinkManagementMessageData0 offset(@javax.annotation.Nonnull Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nonnull
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(@javax.annotation.Nonnull Integer offset) {
    this.offset = offset;
  }


  public DataLinkManagementMessageData0 integerOfSlots(@javax.annotation.Nonnull Integer integerOfSlots) {
    this.integerOfSlots = integerOfSlots;
    return this;
  }

  /**
   * Get integerOfSlots
   * @return integerOfSlots
   */
  @javax.annotation.Nonnull
  public Integer getIntegerOfSlots() {
    return integerOfSlots;
  }

  public void setIntegerOfSlots(@javax.annotation.Nonnull Integer integerOfSlots) {
    this.integerOfSlots = integerOfSlots;
  }


  public DataLinkManagementMessageData0 timeOut(@javax.annotation.Nonnull Integer timeOut) {
    this.timeOut = timeOut;
    return this;
  }

  /**
   * Get timeOut
   * @return timeOut
   */
  @javax.annotation.Nonnull
  public Integer getTimeOut() {
    return timeOut;
  }

  public void setTimeOut(@javax.annotation.Nonnull Integer timeOut) {
    this.timeOut = timeOut;
  }


  public DataLinkManagementMessageData0 increment(@javax.annotation.Nonnull Integer increment) {
    this.increment = increment;
    return this;
  }

  /**
   * Get increment
   * @return increment
   */
  @javax.annotation.Nonnull
  public Integer getIncrement() {
    return increment;
  }

  public void setIncrement(@javax.annotation.Nonnull Integer increment) {
    this.increment = increment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataLinkManagementMessageData0 dataLinkManagementMessageData0 = (DataLinkManagementMessageData0) o;
    return Objects.equals(this.valid, dataLinkManagementMessageData0.valid) &&
        Objects.equals(this.offset, dataLinkManagementMessageData0.offset) &&
        Objects.equals(this.integerOfSlots, dataLinkManagementMessageData0.integerOfSlots) &&
        Objects.equals(this.timeOut, dataLinkManagementMessageData0.timeOut) &&
        Objects.equals(this.increment, dataLinkManagementMessageData0.increment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valid, offset, integerOfSlots, timeOut, increment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataLinkManagementMessageData0 {\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    integerOfSlots: ").append(toIndentedString(integerOfSlots)).append("\n");
    sb.append("    timeOut: ").append(toIndentedString(timeOut)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Valid");
    openapiFields.add("Offset");
    openapiFields.add("integerOfSlots");
    openapiFields.add("TimeOut");
    openapiFields.add("Increment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Valid");
    openapiRequiredFields.add("Offset");
    openapiRequiredFields.add("integerOfSlots");
    openapiRequiredFields.add("TimeOut");
    openapiRequiredFields.add("Increment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataLinkManagementMessageData0
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataLinkManagementMessageData0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataLinkManagementMessageData0 is not found in the empty JSON string", DataLinkManagementMessageData0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataLinkManagementMessageData0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataLinkManagementMessageData0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataLinkManagementMessageData0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataLinkManagementMessageData0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataLinkManagementMessageData0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataLinkManagementMessageData0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataLinkManagementMessageData0.class));

       return (TypeAdapter<T>) new TypeAdapter<DataLinkManagementMessageData0>() {
           @Override
           public void write(JsonWriter out, DataLinkManagementMessageData0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataLinkManagementMessageData0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataLinkManagementMessageData0 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataLinkManagementMessageData0
   * @throws IOException if the JSON string is invalid with respect to DataLinkManagementMessageData0
   */
  public static DataLinkManagementMessageData0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataLinkManagementMessageData0.class);
  }

  /**
   * Convert an instance of DataLinkManagementMessageData0 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

